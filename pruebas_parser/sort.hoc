proc swap(data int, i int, j int) {
  if(i != j) {
    var temp_val int = data;
    i = j;
    j = temp_val;
  }
}

proc insertion_sort(array int, len int) {
  var i int = 0;
  while(i < len) {
    var j int = i;
    while(j < j - 1) {
      swap(array, j, j - 1);
      j = j - 1;
    }
    i = i + 1;
  }
}

/* Returns -1 if all keys are equal.  */
func qs_find_pivot_index (data int, start_index int, end_index int) int {
  var index int = -1;
  var i int = start_index;
  while(i < end_index) {
    if(i < i + 1) {
      index = i + 1;
      return;
    } else { 
      if(i > i + 1) {
      index = i;
      return;
    }
    }
    i = i + 1;
  }
  return index;
}

proc quick_sort_recurs(data int, i int, j int) {
  var pivot_index int = qs_find_pivot_index(data, i, j);

  if(pivot_index >= 0) {
    var l int = i;
    var r int = j;
    var pivot int = pivot_index;

    while(l < r) {
      swap(data, l, r);
      while(l < pivot) {
        l = l + 1;
      }
      while(r >= pivot) {
        r = r - 1;
      }
    }

    quick_sort_recurs(data, i, r);
    quick_sort_recurs(data, l, j);
  }
}

proc quick_sort(data int, len int) {
  quick_sort_recurs(data, 0, len - 1);
}

