list:	  /* nothing */
	| list '\n'
	| list defn '\n'
	| list asgn '\n' 
	| list stmt '\n'  
	| list expr '\n'  
	| list error '\n' 
	;

asgn:	  ID '=' expr semi
	| ID ADDEQ expr	semi
	| ID SUBEQ expr	semi
	| ID MULEQ expr	semi
	| ID DIVEQ expr	semi
	| ID MODEQ exprsemi
	;

stmt:	  expr semi
	| VAR ID type '=' number semi
	| VAR ID type semi
	| FUNC ID '(' formals ')' type stmt semi
	| PROC ID '(' formals ')' stmt semi
	| CONST ID '=' number semi
	| RETURN semi
	| RETURN expr semi       
	| ID '(' arglist ')' semi
	| PRINT prlist semi
	| WHILE '(' cond ')' stmt 
	| FOR '(' cond ';' cond ';' cond ')' stmt 
	| IF '(' cond ')' stmt
	| IF '(' cond ')' stmt ELSE stmt
	| '{' stmtlist '}'	
	;

cond:	   expr 	
	;

stmtlist: /* nothing */		
	| stmtlist '\n'
	| stmtlist stmt
	;

type: 	  INT
	| FLOAT
	;

number: INTEGER
	| NUMFLOAT
	;

expr:	  number
	| ID	
	| asgn
	| ID '(' arglist ')' semi	
	| READ '(' ID ')' semi
	| BLTIN '(' expr ')' semi
	| '(' expr ')' semi	
	| expr '+' expr	semi
	| expr '-' expr	semi
	| expr '*' expr	semi
	| expr '/' expr	semi
	| expr '%' expr	semi
	| expr '^' expr	semi
	| '-' expr semi
	| expr GT expr semi
	| expr GE expr semi
	| expr LT expr semi
	| expr LE expr semi
	| expr EQ expr semi
	| expr NE expr semi
	| expr AND expr semi
	| expr OR expr semi
	| NOT expr semi
	| INC ID semi
	| DEC ID semi
	| ID INC semi
	| ID DEC semi
	;
	
prlist:	  expr			
	| STRING		
	| prlist ',' expr	
	| prlist ',' STRING	
	;

defn: 
	;

formals:	
	| ID	type
	| ID ',' type formals	
	;

arglist:  /* nothing */ 	
	| expr			
	| arglist ',' expr	
	;

semi: /* nothing */
	| ';'
	;
